using System;
using WinUi3Test.Datatypes.Serializing;

namespace WinUi3Test.Datatypes;

/// <summary>
/// Allows you to manage operations on data with possible failure like user cancel changes
/// </summary>
/// <typeparam name="T">Type on which operation happens </typeparam>
public class Operation<T> : Operation
{
    /// <summary>
    /// Passes <typeparamref name="T"/> clone as operation target
    /// Used when you want user to be able to cancel his changes
    /// </summary>
    /// <param name="target"></param>
    public Operation(RefClonable<T> target) : this(target.Clone) {}

    /// <summary>
    /// Passes object generated by <typeparamref name="T"/> factory as operation target
    /// Useful to create new objects with some data initialized
    /// </summary>
    public Operation(Func<T> Factory)
    {
        Target = Factory.Invoke();
    }
    public T Target { get; set; }
    /// <summary>
    /// Event that happens on finish, passes success status and target 
    /// Reset after finish
    /// </summary>
    public event Action<bool,T> OnResult;
    /// <summary>
    /// Triggers OnFinish and OnResult events with target object as parameter 
    /// </summary>
    /// <param name="successful"></param>
    public void Finish(bool successful)
    {
        base.Finish(successful);
        OnResult?.Invoke(successful, Target);
        OnResult = null;
    }
    /// <summary>
    /// 
    /// </summary>
    /// <param name="result"></param>
    public void FinishSuccess(T result)
    {
        this.Target = result;
        Finish(true);
    }
}
public class EmptyOperation<T> : Operation<T>
{

    /// <summary>
    /// Passes default(<typeparamref name="T"/>) as target object
    /// Useful when want create 
    /// </summary>
    public EmptyOperation() : base(()=>default){}
}

/// <summary>
/// Same as Operation<typeparamref name="T"/> but allows creation of new objects of <typeparamref name="T"/>
/// </summary>
/// <typeparam name="T"></typeparam>
public class CreationOperation<T> : Operation<T> where T : new()
{
    /// <summary>
    /// Passes new <typeparamref name="T"/> object as operation target
    /// Useful to create new objects with parameterless constructor
    /// </summary>
    public CreationOperation() : base(() => new T()) { }
}
/// <summary>
/// Class for creating operation that can be succesful or unsuccessful
/// </summary>
public class Operation
{
    /// <summary>
    /// Event that invokes on operation finish
    /// Resets after finish
    /// </summary>
    public event Action<bool> OnFinished;

    /// <summary>
    /// Triggers operation finish
    /// </summary>
    /// <param name="successful"></param>
    public void Finish(bool successful)
    {
        OnFinished?.Invoke(successful);
        OnFinished = null;
    }
}
